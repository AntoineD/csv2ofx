<?php

require_once 'OFX.php';

/**
 * Test class for OFX.
 * Generated by PHPUnit on 2012-12-02 at 17:04:12.
 */
class OFXTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var OFX
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new OFX;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert (array(array('Amount' => '$1,000.00'))) == array(array('Amount' => 1000.00)).
     *
     * @covers OFX::cleanAmounts
     */
    public function testCleanAmounts()
    {
        $this->assertEquals(
          array(array('Amount' => 1000.00)),
          $this->object->cleanAmounts(array(array('Amount' => '$1,000.00')))
        );
    }

    /**
     * Generated from @assert (array(array(array('Account Name' => 'account1'), array('Account Name' => 'account2')), array(array('Account Name' => 'account3'), array('Account Name' => 'account4')))) == array('accounts' => array('account1', 'account3'), 'keys' => array(0, 0)).
     *
     * @covers OFX::getAccounts
     */
    public function testGetAccounts()
    {
        $this->assertEquals(
          array('accounts' => array('account1', 'account3'), 'keys' => array(0, 0)),
          $this->object->getAccounts(array(array(array('Account Name' => 'account1'), array('Account Name' => 'account2')), array(array('Account Name' => 'account3'), array('Account Name' => 'account4'))))
        );
    }

    /**
     * Generated from @assert (array(array(array('Account Name' => 'account1', 'Amount' => -200), array('Account Name' => 'account2', 'Amount' => 200)), array(array('Account Name' => 'account3', 'Amount' => 400), array('Account Name' => 'account4', 'Amount' => -400))), array(200, 400)) == array('accounts' => array('account1', 'account3'), 'keys' => array(0, 0)).
     *
     * @covers OFX::getAccounts
     */
    public function testGetAccounts2()
    {
        $this->assertEquals(
          array('accounts' => array('account1', 'account3'), 'keys' => array(0, 0)),
          $this->object->getAccounts(array(array(array('Account Name' => 'account1', 'Amount' => -200), array('Account Name' => 'account2', 'Amount' => 200)), array(array('Account Name' => 'account3', 'Amount' => 400), array('Account Name' => 'account4', 'Amount' => -400))), array(200, 400))
        );
    }

    /**
     * Generated from @assert (array('somecash', 'checking account', 'other'), array('Bank' => array('checking', 'savings'), 'Cash' => array('cash'))) == array('Cash', 'Bank', 'n/a').
     *
     * @covers OFX::getAccountTypes
     */
    public function testGetAccountTypes()
    {
        $this->assertEquals(
          array('Cash', 'Bank', 'n/a'),
          $this->object->getAccountTypes(array('somecash', 'checking account', 'other'), array('Bank' => array('checking', 'savings'), 'Cash' => array('cash')))
        );
    }

    /**
     * Generated from @assert (array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400))) == array('Accounts Receivable', 'Sales').
     *
     * @covers OFX::getSplitAccounts
     */
    public function testGetSplitAccounts()
    {
        $this->assertEquals(
          array('Accounts Receivable', 'Sales'),
          $this->object->getSplitAccounts(array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400)))
        );
    }

    /**
     * Generated from @assert (array(array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400)), array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400))), array('Accounts Receivable')) == array(array(array('Account Name' => 'Accounts Receivable', 'Amount' => 500), array('Account Name' => 'Sales', 'Amount' => 400)), array(array('Account Name' => 'Accounts Receivable', 'Amount' => 500), array('Account Name' => 'Sales', 'Amount' => 400))).
     *
     * @covers OFX::collapseSplits
     */
    public function testCollapseSplits()
    {
        $this->assertEquals(
          array(array(array('Account Name' => 'Accounts Receivable', 'Amount' => 500), array('Account Name' => 'Sales', 'Amount' => 400)), array(array('Account Name' => 'Accounts Receivable', 'Amount' => 500), array('Account Name' => 'Sales', 'Amount' => 400))),
          $this->object->collapseSplits(array(array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400)), array(array('Account Name' => 'Accounts Receivable', 'Amount' => 200), array('Account Name' => 'Accounts Receivable', 'Amount' => 300), array('Account Name' => 'Sales', 'Amount' => 400))), array('Accounts Receivable'))
        );
    }

    /**
     * Generated from @assert (array(array(array('Amount' => 350), array('Amount' => -400)), array(array('Amount' => 100), array('Amount' => -400), array('Amount' => 300)))) == array(400, 400).
     *
     * @covers OFX::getMaxSplitAmounts
     */
    public function testGetMaxSplitAmounts()
    {
        $this->assertEquals(
          array(400, 400),
          $this->object->getMaxSplitAmounts(array(array(array('Amount' => 350), array('Amount' => -400)), array(array('Amount' => 100), array('Amount' => -400), array('Amount' => 300))))
        );
    }

    /**
     * Generated from @assert (array(array(array('Amount' => 100), array('Amount' => -100)), array(array('Amount' => -300), array('Amount' => 200), array('Amount' => 100)))) == true.
     *
     * @covers OFX::verifySplits
     */
    public function testVerifySplits()
    {
        $this->assertTrue(
          $this->object->verifySplits(array(array(array('Amount' => 100), array('Amount' => -100)), array(array('Amount' => -300), array('Amount' => 200), array('Amount' => 100))))
        );
    }

    /**
     * Generated from @assert (array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account1'), array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account2'))) == array(array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account1')), array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account2'))).
     *
     * @covers OFX::makeSplits
     */
    public function testMakeSplits()
    {
        $this->assertEquals(
          array(array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account1')), array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account2'))),
          $this->object->makeSplits(array(array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account1'), array('Amount' => 1,000.00, 'Date' => '06/12/10', 'Category' => 'Checking', 'Account Name' => 'account2')))
        );
    }

    /**
     * Generated from @assert (array('Transaction Type' => 'debit', 'Amount' => 1000.00, 'Date' => '06/12/10', 'Description' => 'payee', 'Original Description' => 'description', 'Notes' => 'notes', 'Category' => 'Checking', 'Account Name' => 'account')) == array('Amount' => '-1000', 'Payee' => 'payee', 'Date' => '06/12/10', 'Desc' => 'description notes', 'Id' => '4fe86d9de995225b174fb3116ca6b1f4', 'CheckNum' => null, 'Type' => 'debit', 'SplitAccount' => 'Checking', 'SplitAccountId' => '195917574edc9b6bbeb5be9785b6a479').
     *
     * @covers OFX::getTransactionData
     */
    public function testGetTransactionData()
    {
        $this->assertEquals(
          array('Amount' => '-1000', 'Payee' => 'payee', 'Date' => '06/12/10', 'Desc' => 'description notes', 'Id' => '4fe86d9de995225b174fb3116ca6b1f4', 'CheckNum' => null, 'Type' => 'debit', 'SplitAccount' => 'Checking', 'SplitAccountId' => '195917574edc9b6bbeb5be9785b6a479'),
          $this->object->getTransactionData(array('Transaction Type' => 'debit', 'Amount' => 1000.00, 'Date' => '06/12/10', 'Description' => 'payee', 'Original Description' => 'description', 'Notes' => 'notes', 'Category' => 'Checking', 'Account Name' => 'account'))
        );
    }

    /**
     * Generated from @assert ('account', 'type') == "!Account\nNaccount\nTtype\n^\n".
     *
     * @covers OFX::getQIFTransactionHeader
     */
    public function testGetQIFTransactionHeader()
    {
        $this->assertEquals(
          "!Account\nNaccount\nTtype\n^\n",
          $this->object->getQIFTransactionHeader('account', 'type')
        );
    }

    /**
     * Generated from @assert ('type', array('Payee' => 'payee', 'Amount' => 100, 'CheckNum' => 1, 'Date' => '01/01/12')) == "!Type:type\nN1\nD01/01/12\nPpayee\nT100\n".
     *
     * @covers OFX::getQIFTransactionContent
     */
    public function testGetQIFTransactionContent()
    {
        $this->assertEquals(
          "!Type:type\nN1\nD01/01/12\nPpayee\nT100\n",
          $this->object->getQIFTransactionContent('type', array('Payee' => 'payee', 'Amount' => 100, 'CheckNum' => 1, 'Date' => '01/01/12'))
        );
    }

    /**
     * Generated from @assert ('type', array('Payee' => 'payee', 'Amount' => 100, 'Date' => '01/01/12')) == "!Type:type\nD01/01/12\nPpayee\nT100\n".
     *
     * @covers OFX::getQIFTransactionContent
     */
    public function testGetQIFTransactionContent2()
    {
        $this->assertEquals(
          "!Type:type\nD01/01/12\nPpayee\nT100\n",
          $this->object->getQIFTransactionContent('type', array('Payee' => 'payee', 'Amount' => 100, 'Date' => '01/01/12'))
        );
    }

    /**
     * Generated from @assert ('account', array('Desc' => 'desc', 'Amount' => 100)) == "Saccount\nEdesc\n$100\n".
     *
     * @covers OFX::getQIFSplitContent
     */
    public function testGetQIFSplitContent()
    {
        $this->assertEquals(
          "Saccount\nEdesc\n$100\n",
          $this->object->getQIFSplitContent('account', array('Desc' => 'desc', 'Amount' => 100))
        );
    }

    /**
     * Generated from @assert () == "^\n".
     *
     * @covers OFX::getQIFTransactionFooter
     */
    public function testGetQIFTransactionFooter()
    {
        $this->assertEquals(
          "^\n",
          $this->object->getQIFTransactionFooter()
        );
    }

    /**
     * Generated from @assert (20120101111111) == "<OFX>\n\t<SIGNONMSGSRSV1>\n\t\t<SONRS>\n\t\t\t<STATUS>\n\t\t\t\t<CODE>0</CODE>\n\t\t\t\t<SEVERITY>INFO</SEVERITY>\n\t\t\t</STATUS>\n\t\t\t<DTSERVER>20120101111111</DTSERVER>\n\t\t\t<LANGUAGE>ENG</LANGUAGE>\n\t\t</SONRS>\n\t</SIGNONMSGSRSV1>\n\t<BANKMSGSRSV1><STMTTRNRS>\n\t\t<TRNUID>20120101111111</TRNUID>\n\t\t<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>\n".
     *
     * @covers OFX::getOFXTransactionHeader
     */
    public function testGetOFXTransactionHeader()
    {
        $this->assertEquals(
          "<OFX>\n\t<SIGNONMSGSRSV1>\n\t\t<SONRS>\n\t\t\t<STATUS>\n\t\t\t\t<CODE>0</CODE>\n\t\t\t\t<SEVERITY>INFO</SEVERITY>\n\t\t\t</STATUS>\n\t\t\t<DTSERVER>20120101111111</DTSERVER>\n\t\t\t<LANGUAGE>ENG</LANGUAGE>\n\t\t</SONRS>\n\t</SIGNONMSGSRSV1>\n\t<BANKMSGSRSV1><STMTTRNRS>\n\t\t<TRNUID>20120101111111</TRNUID>\n\t\t<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>\n",
          $this->object->getOFXTransactionHeader(20120101111111)
        );
    }

    /**
     * Generated from @assert ('USD', 1, 'account', 'type', 20120101) == "\t<STMTRS>\n\t\t<CURDEF>USD</CURDEF>\n\t\t<BANKACCTFROM>\n\t\t\t<BANKID>1</BANKID>\n\t\t\t<ACCTID>account</ACCTID>\n\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t</BANKACCTFROM>\n\t\t<BANKTRANLIST>\n\t\t\t<DTSTART>20120101</DTSTART>\n\t\t\t<DTEND>20120101</DTEND>\n".
     *
     * @covers OFX::getOFXTransactionAccountStart
     */
    public function testGetOFXTransactionAccountStart()
    {
        $this->assertEquals(
          "\t<STMTRS>\n\t\t<CURDEF>USD</CURDEF>\n\t\t<BANKACCTFROM>\n\t\t\t<BANKID>1</BANKID>\n\t\t\t<ACCTID>account</ACCTID>\n\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t</BANKACCTFROM>\n\t\t<BANKTRANLIST>\n\t\t\t<DTSTART>20120101</DTSTART>\n\t\t\t<DTEND>20120101</DTEND>\n",
          $this->object->getOFXTransactionAccountStart('USD', 1, 'account', 'type', 20120101)
        );
    }

    /**
     * Generated from @assert (20120101111111, array('Type' => 'type', 'Amount' => 100, 'Id' => 1, 'Payee' => 'payee', 'Memo' => 'memo')) == "\t\t\t\t<STMTTRN>\n\t\t\t\t\t<TRNTYPE>type</TRNTYPE>\n\t\t\t\t\t<DTPOSTED>20120101111111</DTPOSTED>\n\t\t\t\t\t<TRNAMT>100</TRNAMT>\n\t\t\t\t\t<FITID>1</FITID>\n\t\t\t\t\t<CHECKNUM>1</CHECKNUM>\n\t\t\t\t\t<NAME>payee</NAME>\n\t\t\t\t\t<MEMO>memo</MEMO>\n\t\t\t\t</STMTTRN>\n".
     *
     * @covers OFX::getOFXTransaction
     */
    public function testGetOFXTransaction()
    {
        $this->assertEquals(
          "\t\t\t\t<STMTTRN>\n\t\t\t\t\t<TRNTYPE>type</TRNTYPE>\n\t\t\t\t\t<DTPOSTED>20120101111111</DTPOSTED>\n\t\t\t\t\t<TRNAMT>100</TRNAMT>\n\t\t\t\t\t<FITID>1</FITID>\n\t\t\t\t\t<CHECKNUM>1</CHECKNUM>\n\t\t\t\t\t<NAME>payee</NAME>\n\t\t\t\t\t<MEMO>memo</MEMO>\n\t\t\t\t</STMTTRN>\n",
          $this->object->getOFXTransaction(20120101111111, array('Type' => 'type', 'Amount' => 100, 'Id' => 1, 'Payee' => 'payee', 'Memo' => 'memo'))
        );
    }

    /**
     * Generated from @assert (20120101111111) == "\t\t</BANKTRANLIST>\n\t\t<LEDGERBAL>\n\t\t\t<BALAMT>0</BALAMT>\n\t\t\t<DTASOF>20120101111111</DTASOF>\n\t\t</LEDGERBAL>\n\t</STMTRS>\n".
     *
     * @covers OFX::getOFXTransactionAccountEnd
     */
    public function testGetOFXTransactionAccountEnd()
    {
        $this->assertEquals(
          "\t\t</BANKTRANLIST>\n\t\t<LEDGERBAL>\n\t\t\t<BALAMT>0</BALAMT>\n\t\t\t<DTASOF>20120101111111</DTASOF>\n\t\t</LEDGERBAL>\n\t</STMTRS>\n",
          $this->object->getOFXTransactionAccountEnd(20120101111111)
        );
    }

    /**
     * Generated from @assert () == '</STMTTRNRS></BANKMSGSRSV1></OFX>'.
     *
     * @covers OFX::getOFXTransactionFooter
     */
    public function testGetOFXTransactionFooter()
    {
        $this->assertEquals(
          '</STMTTRNRS></BANKMSGSRSV1></OFX>',
          $this->object->getOFXTransactionFooter()
        );
    }

    /**
     * Generated from @assert ('20120101_111111') == "<OFX>\n\t<SIGNONMSGSRSV1>\n\t\t<SONRS></SONRS>\n\t</SIGNONMSGSRSV1>\n\t<BANKMSGSRSV1><INTRATRNRS>\n\t\t<TRNUID>20120101_111111</TRNUID>\n\t\t<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>\n".
     *
     * @covers OFX::getOFXTransferHeader
     */
    public function testGetOFXTransferHeader()
    {
        $this->assertEquals(
          "<OFX>\n\t<SIGNONMSGSRSV1>\n\t\t<SONRS></SONRS>\n\t</SIGNONMSGSRSV1>\n\t<BANKMSGSRSV1><INTRATRNRS>\n\t\t<TRNUID>20120101_111111</TRNUID>\n\t\t<STATUS><CODE>0</CODE><SEVERITY>INFO</SEVERITY></STATUS>\n",
          $this->object->getOFXTransferHeader('20120101_111111')
        );
    }

    /**
     * Generated from @assert ('USD', 20120101111111, 1, 'account', 'type', array('SplitAccountId' => 2, 'SplitAccount' => 'split_account', 'Amount' => 100)) == "\t<INTRARS>\n\t\t<CURDEF>USD</CURDEF>\n\t\t<SRVRTID>20120101111111</SRVRTID>\n\t\t<XFERINFO>\n\t\t\t<BANKACCTFROM>\n\t\t\t\t<BANKID>1</BANKID>\n\t\t\t\t<ACCTID>account</ACCTID>\n\t\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t\t</BANKACCTFROM>\n\t\t\t<BANKACCTTO>\n\t\t\t\t<BANKID>2</BANKID>\n\t\t\t\t<ACCTID>split_account</ACCTID>\n\t\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t\t</BANKACCTTO>\n\t\t\t<TRNAMT>100</TRNAMT>\n\t\t</XFERINFO>\n\t\t<DTPOSTED>20120101111111</DTPOSTED>\n\t</INTRARS>\n".
     *
     * @covers OFX::getOFXTransfer
     */
    public function testGetOFXTransfer()
    {
        $this->assertEquals(
          "\t<INTRARS>\n\t\t<CURDEF>USD</CURDEF>\n\t\t<SRVRTID>20120101111111</SRVRTID>\n\t\t<XFERINFO>\n\t\t\t<BANKACCTFROM>\n\t\t\t\t<BANKID>1</BANKID>\n\t\t\t\t<ACCTID>account</ACCTID>\n\t\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t\t</BANKACCTFROM>\n\t\t\t<BANKACCTTO>\n\t\t\t\t<BANKID>2</BANKID>\n\t\t\t\t<ACCTID>split_account</ACCTID>\n\t\t\t\t<ACCTTYPE>type</ACCTTYPE>\n\t\t\t</BANKACCTTO>\n\t\t\t<TRNAMT>100</TRNAMT>\n\t\t</XFERINFO>\n\t\t<DTPOSTED>20120101111111</DTPOSTED>\n\t</INTRARS>\n",
          $this->object->getOFXTransfer('USD', 20120101111111, 1, 'account', 'type', array('SplitAccountId' => 2, 'SplitAccount' => 'split_account', 'Amount' => 100))
        );
    }

    /**
     * Generated from @assert () == '</INTRATRNRS></BANKMSGSRSV1></OFX>'.
     *
     * @covers OFX::getOFXTransferFooter
     */
    public function testGetOFXTransferFooter()
    {
        $this->assertEquals(
          '</INTRATRNRS></BANKMSGSRSV1></OFX>',
          $this->object->getOFXTransferFooter()
        );
    }
}
?>
