<?php

require_once '/Users/reubano/Documents/Projects/csv2ofx/lib_general/MyArray.php';

/**
 * Test class for MyArray.
 * Generated by PHPUnit on 2012-09-30 at 22:07:04.
 */
class MyArrayTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var MyArray
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MyArray;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert ('string', array('one', '2w', '3a'), 3) == array(2).
     *
     * @covers MyArray::arraySearchType
     */
    public function testArraySearchType()
    {
        $this->assertEquals(
          array(2),
          $this->object->arraySearchType('string', array('one', '2w', '3a'), 3)
        );
    }

    /**
     * Generated from @assert ('numeric', array('1', 2, 3), 3) == array(2).
     *
     * @covers MyArray::arraySearchType
     */
    public function testArraySearchType2()
    {
        $this->assertEquals(
          array(2),
          $this->object->arraySearchType('numeric', array('1', 2, 3), 3)
        );
    }

    /**
     * Generated from @assert ('numeric', array('one', 2, 3), 2) == array(2).
     *
     * @covers MyArray::arraySearchType
     */
    public function testArraySearchType3()
    {
        $this->assertEquals(
          array(2),
          $this->object->arraySearchType('numeric', array('one', 2, 3), 2)
        );
    }

    /**
     * Generated from @assert (array('one', 'two', 'three'), 'two', 2) == array('one', 2, 'three').
     *
     * @covers MyArray::arraySubstitute
     */
    public function testArraySubstitute()
    {
        $this->assertEquals(
          array('one', 2, 'three'),
          $this->object->arraySubstitute(array('one', 'two', 'three'), 'two', 2)
        );
    }

    /**
     * Generated from @assert (array('one', 'two', 'three'), 2) == array('three', 'one', 'two').
     *
     * @covers MyArray::arrayMove
     */
    public function testArrayMove()
    {
        $this->assertEquals(
          array('three', 'one', 'two'),
          $this->object->arrayMove(array('one', 'two', 'three'), 2)
        );
    }

    /**
     * Generated from @assert (array(array('sort' => 'one'), array('sort' => 'alpha')), 'sort') == array(array('sort' => 'alpha'), array('sort' => 'one')).
     *
     * @covers MyArray::arraySortBySubValue
     */
    public function testArraySortBySubValue()
    {
        $this->assertEquals(
          array(array('sort' => 'alpha'), array('sort' => 'one')),
          $this->object->arraySortBySubValue(array(array('sort' => 'one'), array('sort' => 'alpha')), 'sort')
        );
    }

    /**
     * Generated from @assert (array(1, 2, 3), array(2, 3, 4, 5)) == array(1 => 2, 2 => 3, 3 => 4).
     *
     * @covers MyArray::arraySafeCombine
     */
    public function testArraySafeCombine()
    {
        $this->assertEquals(
          array(1 => 2, 2 => 3, 3 => 4),
          $this->object->arraySafeCombine(array(1, 2, 3), array(2, 3, 4, 5))
        );
    }

    /**
     * Generated from @assert ('Two', array('one', 'two', 'three')) == true.
     *
     * @covers MyArray::inArray
     */
    public function testInArray()
    {
        $this->assertTrue(
          $this->object->inArray('Two', array('one', 'two', 'three'))
        );
    }

    /**
     * Generated from @assert (array('two'), 0) == array('b8a9f715dbb64fd5c56e7783c6820a61').
     *
     * @covers MyArray::arrayHash
     */
    public function testArrayHash()
    {
        $this->assertEquals(
          array('b8a9f715dbb64fd5c56e7783c6820a61'),
          $this->object->arrayHash(array('two'), 0)
        );
    }

    /**
     * Generated from @assert (array(array('', 'value1', 'value2'), array('', '', ''), array('value3', '', 'value4'))) == array(0 => array('', 'value1', 'value2'), 2 => array('value3', '', 'value4')).
     *
     * @covers MyArray::arrayTrim
     */
    public function testArrayTrim()
    {
        $this->assertEquals(
          array(0 => array('', 'value1', 'value2'), 2 => array('value3', '', 'value4')),
          $this->object->arrayTrim(array(array('', 'value1', 'value2'), array('', '', ''), array('value3', '', 'value4')))
        );
    }

    /**
     * Generated from @assert (array(array(1, 2, 3), array(4, 5), array(6))) == array(array(1, 2, 3), array(4, 5, ''), array(6, '', '')).
     *
     * @covers MyArray::arrayLengthen
     */
    public function testArrayLengthen()
    {
        $this->assertEquals(
          array(array(1, 2, 3), array(4, 5, ''), array(6, '', '')),
          $this->object->arrayLengthen(array(array(1, 2, 3), array(4, 5), array(6)))
        );
    }

    /**
     * Generated from @assert (array(array('key1', 'key2', 'key3'), array('value1', 'value2', 'value3'), array('value4', 'value5', 'value6'))) == array(array('key1' => 'key1', 'key2' => 'key2', 'key3' => 'key3'), array('key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'), array('key1' => 'value4', 'key2' => 'value5', 'key3' => 'value6')).
     *
     * @covers MyArray::arrayInsertKey
     */
    public function testArrayInsertKey()
    {
        $this->assertEquals(
          array(array('key1' => 'key1', 'key2' => 'key2', 'key3' => 'key3'), array('key1' => 'value1', 'key2' => 'value2', 'key3' => 'value3'), array('key1' => 'value4', 'key2' => 'value5', 'key3' => 'value6')),
          $this->object->arrayInsertKey(array(array('key1', 'key2', 'key3'), array('value1', 'value2', 'value3'), array('value4', 'value5', 'value6')))
        );
    }

    /**
     * Generated from @assert (array(array('key1' => '1/1/12'), array('key1' => '2/1/12')), 'key1', 'date') == array(array('key1' => '2012-01-01'), array('key1' => '2012-02-01')).
     *
     * @covers MyArray::arrayFormat
     */
    public function testArrayFormat()
    {
        $this->assertEquals(
          array(array('key1' => '2012-01-01'), array('key1' => '2012-02-01')),
          $this->object->arrayFormat(array(array('key1' => '1/1/12'), array('key1' => '2/1/12')), 'key1', 'date')
        );
    }

    /**
     * Generated from @assert (array(array('&'), array('<'))) == array(array('&amp;'), array('&lt;')).
     *
     * @covers MyArray::xmlize
     */
    public function testXmlize()
    {
        $this->assertEquals(
          array(array('&amp;'), array('&lt;')),
          $this->object->xmlize(array(array('&'), array('<')))
        );
    }

    /**
     * @covers MyArray::array2CSV
     * @todo Implement testArray2CSV().
     */
    public function testArray2CSV()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
